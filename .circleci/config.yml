version: 2.1

commands:
  # install_awscli: 
  #   description: Install AWS cli
  #   steps:
  #     - run: 
  #         name: Install AWS cli
  #         command: 
  #           curl "https://awscli.amazon.com/awscli-exe.linux-x86_x64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           sudo  ./aws/install

  # install_nodejs: 
  #   description: Install Node.js 13
  #   steps:
  #     - run: 
  #         name: Install Node.js 13
  #         command: 
  #           curl -fsSL "https://deb.nodesource.com/setup_13.x" sudo -E bash
  #           sudo apt install -y nodejs

  # install_ansible: 
  #   description: Install Ansible
  #   steps:
  #     - run: 
  #         name: Install Ansible
  #         command: 
  #           sudo apt update
  #           sudo apt install software-properties-common -y
  #           sudo add-apt-repository --yes -update ppa:ansible/ansible 
  #           sudo apt install ansible -y

  # destroy-environment:
  #   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
  #   parameters:
  #     # Add parameter here
  #     workflow_id:
  #       default: "${CIRCLE_WORKFLOW_ID:0:7}"
  #       type: string
  #   steps:
  #     - run:
  #         name: Destroy environments
  #         when: on_fail
  #         command: |
  #           # Your code here
  #           aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
  #           aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
  #           aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"

  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   parameters:
  #     # Add parameter here     
  #     workflow_id:
  #       default: "${CIRCLE_WORKFLOW_ID:0:7}"
  #       type: string
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         # Add when this will run
  #         when: on_fail
  #         command: |
  #           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
  #           SUCCESS=$(curl --insecure "https://kvdb.io/Gihzln9tkas8UmwtTTnRhb/migration_<<parameters.workflow_id>>")
  #           if(( $SUCCESS==1 )); 
  #           then
  #            cd ~/project/backend
  #            npm install
  #            npm rum migrations:revert
  #           fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      # Your job code here
      - run:
          name: Frontend Test
          command: |
            cd frontend
            npm install
            npm run test
      # Restore from cache
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test


                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
      - image: circleci/node:13.8.0
    steps: 
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: backend Test
          command: |
            cd backend
            npm install
            npm run test
      # Restore from cache
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      # Your job code here
      - run:
          name: scan Frontend 
          command: |
            cd frontend
            npm install 
            npm audit fix --audit-level=critical --force

            npm audit --audit-level=critical
      # Restore from cache
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [scan-backend]
      # Your job code here
      - run:
          name: scan backend 
          command: |
            cd backend
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force

            npm audit --audit-level=critical
      # Restore from cache
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend

  # deploy-infrastructure:
  #   docker:
  #     # Docker image here that supports AWS CLI 
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip

  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #             --tags project=udapeople

  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #             --tags project=udapeople
              
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           # Your code here
  #           cd .circleci/ansible
  #           cat inventory.txt
  #           aws ec2 describe-instances \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --output text  --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
  #           cat inventory.txt
  #           # export BACKEND_IP=$(aws ec2 describe-instances \
  #           # --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           # --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
  #           # --output text
  #           # )
  #           # echo $(BACKEND_IP)

  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt
  #     # Here's where you will add some code to rollback on failure      

  # configure-infrastructure:
  #   docker:
  #     # Docker image here that supports Ansible
  #     - image: cimg/base:stable
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "70:e9:cd:8c:df:6e:4e:6f:d3:83:06:0a:0c:90:7e:9f"
  #     # attach workspace
  #     - attach_workspace:
  #         at: ~/

  #     # - install_awscli
  #     - install_ansible

  #     - run:
  #         name: Configure server 
  #         command: |
  #           cd circleci/ansible
  #           cat inventory.txt

  #           ansible-playbook -i inventory.txt configure.server.yml
  #     # Here's where you will add some code to rollback on failure      
  #     - destroy-environment

  # run-migrations:
  #   docker:
  #     # Docker image here that supports NodeJS
  #     - image: circleci/node:13.8.0
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           npm run migrations > migrations_dump.txt
            
  #     - run:
  #         name: Send migration results to kvdb
  #         command: |
  #           grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #             curl --insecure "https://kvdb.io/7pRjTVtz8m8T3pk5ob38Mu/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
  #           fi
  #    # Here's where you will add some code to rollback on failure      
  #     - destroy_environment
  #     - revert_migrations

  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: cimg/base:stable
  #   steps:
  #     # Checkout code from git
  #     - checkout

  #     - add_ssh_keys:
  #         fingerprints:
  #           - "70:e9:cd:8c:df:6e:4e:6f:d3:83:06:0a:0c:90:7e:9f"
  #     - attach_workspace:
  #         at: ~/

  #     - install_nodejs
  #     - install_awscli
  #     - install_ansible

  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           export BACKEND_IP-$(aws ec2 describe-instances \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --filter Name-tag:Name,Value=backend-${CIRCLE_WORKFLOW_ID:0:7} \
  #           --output text
  #           )
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL = ${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env

  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend 
  #           sudo npm install -g npm@latest
  #           rm -rf node_modules
  #           npm install
  #           npm run build
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     # Here's where you will add some code to rollback on failure      
  #     - destroy-environment
  #     - revert-migrations

                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #     - image: cimg/base:stable
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "70:e9:cd:8c:df:6e:4e:6f:d3:83:06:0a:0c:90:7e:9f"
  #     # attach workspace
  #     - attach_workspace:
  #         at: ~/
  #     # - run:
  #     #     name: Install dependencies
  #     #     command: |
  #     #       apk add --update ansible

  #     - install_nodejs
  #     - install_awscli
  #     - install_ansible
  #     # - run:
  #     #     name: Install dependencies
  #     #     command: |
  #     #       # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend 

  #           npm i
  #           npm run build
  #           cd ..

  #           cd .circleci/ansible
  #           mkdir files
  #           cd files
  #           tar -C ../../../backend -czvf artifact.tar.gz .
  #           cd ../

  #           echo "Content of the inventory.txt file is ..........".
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml

  #     # Here's where you will add some code to rollback on failure  
  #     - destroy-environment
  #     - revert-migrations

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]